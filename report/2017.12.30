今天在代码上运行了交叉熵代价函数版的神经网络，相较于二次代价函数，在正确率上确实有小幅度提高，但在今天的学习也遇到了一些问题:
1.使用交叉熵代价函数后只是在输出层消除了σ'(z)，但是隐藏层还是会受到本层σ'(z)的影响，这样的话我感觉用交叉熵代价函数和把输出层神经元的S型函数换成线性代价
  函数没区别
2.使用柔性最大值函数最后给出的是答案的概率分布，而后推测正确答案是概率最大的那个选项，但是我们使用S型函数的话，在给出的输出矩阵中，我们也是把值最大的那个
  分量视为最可能的正确答案，我不知道本质区别在哪
